package minicraft.screen;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.imageio.ImageIO;

import org.jetbrains.annotations.NotNull;

import minicraft.core.io.Sound;
import minicraft.core.FileHandler;
import minicraft.core.Game;
import minicraft.core.Renderer;
import minicraft.core.io.InputHandler;
import minicraft.gfx.Color;
import minicraft.gfx.Font;
import minicraft.gfx.MobSprite;
import minicraft.gfx.Screen;
import minicraft.gfx.SpriteSheet;
import minicraft.saveload.Save;
import minicraft.screen.entry.ListEntry;
import minicraft.screen.entry.SelectEntry;

/* The skins are put in a folder generated by the game called "skins".
 * Many skins can be put according to the number of files.
 */
public class SkinDisplay extends Display {
	private static final List<String> skinNames = new ArrayList<>();
	private static final int defaultSkins;
	private static final SpriteSheet defaultSheet;
	private static final List<SpriteSheet> customSkinSheets = new ArrayList<>();
	public static int selectedSkinIndex = 0;
	public int toFix;
	private int step;

	static {
		// Load the default sprite sheet.
		defaultSheet = Renderer.loadDefaultSpriteSheets()[4];

		// These are all the generic skins. To add one, just add an entry in this list.
		skinNames.add("Paul");
		skinNames.add("Paul with cape");
		skinNames.add("Familiar boy");
		skinNames.add("Familiar girl");

		// Never remove this
		defaultSkins = skinNames.size();

		// Get the folder containing the skins.
		File skinFolder = new File(FileHandler.getSystemGameDir() + "/" + FileHandler.getLocalGameDir() + "/skins");

		// Create folder, and see if it was successful.
		if (skinFolder.mkdirs()) {
			System.out.println("Created texture packs folder at" + skinFolder);
		}

		// Read and add the .png file to the skins list.
		for (String fileName : Objects.requireNonNull(skinFolder.list())) {
			if (fileName.endsWith(".png")) { // Only .png skins files
				BufferedImage image = null;
				try {
					image = ImageIO.read(new FileInputStream(skinFolder + "/" + fileName));
				} catch (IOException e) {
					e.printStackTrace();
					System.out.println("Image at " + fileName + " is invalid.");
				}

				// If we found an image.
				if (image != null) {
					SpriteSheet spriteSheet = new SpriteSheet(image);

					// Check if sheet is a multiple of 8.
					if (spriteSheet.width % 8 == 0 && spriteSheet.height % 8 == 0) {
						// Add the spritesheet to the custom skins list.
						customSkinSheets.add(spriteSheet);

						// Remove the filetype (.png) and to the .
						skinNames.add(fileName.substring(0, fileName.length()-4));
					} else {
						// Go here if image has wrong dimensions.
						System.out.println("Custom skin at " + fileName + " has incorrect width or height. Should be a multiple of 8.");
					}
				}
			}
		}
	}

	public static List<ListEntry> getSkinsAsEntries() {
		List<ListEntry> l = new ArrayList<>();
		for (String s : skinNames) {
			l.add(new SelectEntry(s, Game::exitMenu));
		}

		return l;
	}

	public SkinDisplay() {
		super(true, true, new Menu.Builder(true, 2, RelPos.CENTER, 24,getSkinsAsEntries()).setTitle("Skins",Color.PINK).setSize(168, 64).createMenu());

		menus[0].setSelection(selectedSkinIndex);
	}


	@Override
	public void onExit() {
		// Save the selected skin.
		new Save();

		// Play confirm sound.
		Sound.confirm.play();
	}

	int sel = menus[0].getSelection();

	@Override
	public void tick(InputHandler input) {
		super.tick(input);

		int prevSel = sel;
		sel = menus[0].getSelection();

		// Executes every time the selection is updated.
		if (sel != prevSel) {
			if (sel >= defaultSkins) {
				Renderer.screen.setSkinSheet(customSkinSheets.get(sel - defaultSkins));
				System.out.println("Skin sheet set to " + skinNames.get(sel) + ".png");
			} else {
				Renderer.screen.setSkinSheet(defaultSheet);
				System.out.println("Skin sheet changed to default sheet.");
			}

			selectedSkinIndex = menus[0].getSelection();
		}
		if(Game.toFix==false) {
			Game.toFix = true;

			Game.setMenu(new TitleDisplay()); // Sets menu to the title screen.
		}
	}

	@Override
	public void render(Screen screen) {
		super.render(screen);
		step++;

		// Title.
		//Font.drawCentered("Skins", screen, Screen.h - 180, Color.WHITE);

		int h = 2;
		int w = 2;
		int xoffset = Screen.w / 2 - w * 4; // Put this in the center of the screen
		int yoffset = 38;

		int spriteIndex = (step / 40) % 8; // 9 = 8 Frames for sprite

		// Render preview of skin.
		for (int y = 0; y < h; y++)
			for (int x = 0; x < w; x++)
				if (menus[0].getSelection() < defaultSkins) {
					screen.render(xoffset + x * 8, yoffset + y * 8, spriteIndex * 2 + x + (y + menus[0].getSelection() * 4) * 32, 0, 4);
				} else {
					screen.render(xoffset + x * 8, yoffset + y * 8, spriteIndex * 2 + x + y * 32, 0, 4, - 1, false, 0);
				}

		// Help text.
		Font.drawCentered("Use "+ Game.input.getMapping("cursor-down") + " and " + Game.input.getMapping("cursor-up") + " to move.", screen, Screen.h - 17, Color.DARK_GRAY);
		Font.drawCentered(Game.input.getMapping("SELECT") + " to select.", screen, Screen.h - 9, Color.DARK_GRAY);
	}

	public static int getSelectedSkinIndex() {
		return selectedSkinIndex;
	}

	public static void setSelectedSkinIndex(int selectedSkinIndex) {
		SkinDisplay.selectedSkinIndex = selectedSkinIndex;
	}

	// First array is one of the four animations.
	@NotNull
	public static MobSprite[][][] getSkinAsMobSprite() {
		MobSprite[][][] mobSprites = new MobSprite[4][][];

		if (selectedSkinIndex < defaultSkins) {
			mobSprites[0] = MobSprite.compilePlayerSpriteAnimations(0, SkinDisplay.getSelectedSkinIndex() * 4);
			mobSprites[1] = MobSprite.compilePlayerSpriteAnimations(0, SkinDisplay.getSelectedSkinIndex() * 4 + 2);
			mobSprites[2] = MobSprite.compilePlayerSpriteAnimations(8, SkinDisplay.getSelectedSkinIndex() * 4);
			mobSprites[3] = MobSprite.compilePlayerSpriteAnimations(8, SkinDisplay.getSelectedSkinIndex() * 4 + 2);
		} else {
			mobSprites[0] = MobSprite.compilePlayerSpriteAnimations(0, 0);
			mobSprites[1] = MobSprite.compilePlayerSpriteAnimations(0, 2);
			mobSprites[2] = MobSprite.compilePlayerSpriteAnimations(8, 0);
			mobSprites[3] = MobSprite.compilePlayerSpriteAnimations(8, 2);
		//	mobSprites[0] = MobSprite.compileCustomPlayerSpriteAnimations(0, 0, customSkins.get(selectedSkinIndex - defaultSkins));
		//	mobSprites[1] = MobSprite.compileCustomPlayerSpriteAnimations(0, 2, customSkins.get(selectedSkinIndex - defaultSkins));
		//	mobSprites[2] = MobSprite.compileCustomPlayerSpriteAnimations(8, 0, customSkins.get(selectedSkinIndex - defaultSkins));
		//	mobSprites[3] = MobSprite.compileCustomPlayerSpriteAnimations(8, 2, customSkins.get(selectedSkinIndex - defaultSkins));
		}

		return mobSprites;
	}
}
